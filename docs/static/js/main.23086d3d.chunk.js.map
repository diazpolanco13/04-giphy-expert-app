{"version":3,"sources":["Components/AppCategory.jsx","helpers/getGifs.js","Components/GifGridItem.jsx","Components/GifGrid.jsx","hooks/useFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AppCategory","categories","setCategories","useState","imputValue","setImputValue","onSubmit","e","preventDefault","trim","console","log","className","type","placeholder","value","onChange","target","getGifs","category","a","URL","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagen","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAiCeA,EA9BK,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAAoB,EAClBC,mBAAS,IADS,mBAC/CC,EAD+C,KACnCC,EADmC,KAatD,OACC,0BAAMC,SAXc,SAACC,GACrBA,EAAEC,iBACGJ,EAAWK,QAGfP,EAAc,CAACE,GAAF,mBAAiBH,KAC9BI,EAAc,KAHdK,QAAQC,IAAI,sBASZ,2BACCC,UAAU,2IACVC,KAAK,OACLC,YAAY,iBACZC,MAAOX,EACPY,SAAU,SAACT,GAAD,OAAOF,EAAcE,EAAEU,OAAOF,Y,uBCpB/BG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UAAUH,GAD1C,kBAFR,GAEQ,oBAHP,oCAGO,SAGHI,MAAMF,GAHH,cAGhBG,EAHgB,gBAICA,EAAKC,OAJN,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAVd,kBAafL,GAbe,4CAAH,sDCkBLQ,EAlBK,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC5B,OAEE,yBAAKpB,UAAU,wDACb,yBAAKA,UAAU,2BAA2BwB,IAAKJ,EAAKK,IAAKN,IACzD,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,0BAA0BmB,MCiBlCO,EApBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHN,SAACA,GAAc,IAAD,EACfhB,mBAAS,CAClCuB,KAAM,GACNa,SAAS,IAH+B,mBAClCC,EADkC,KAC3BC,EAD2B,KAgBzC,OATAC,qBAAU,WACTxB,EAAQC,GAAUwB,MAAK,SAACC,GACvBH,EAAS,CACRf,KAAMkB,EACNL,SAAS,SAGT,CAACpB,IAEGqB,EDZ2BK,CAAa1B,GAAjCc,EADmB,EACzBP,KAAca,EADW,EACXA,QAEtB,OACC,oCACC,wBAAI3B,UAAU,kDAAkDO,GAC/DoB,GAAW,0CACZ,yBAAK3B,UAAU,kBACbqB,EAAOL,KAAI,SAACkB,GACZ,OAAO,kBAAC,EAAD,eAAaC,IAAKD,EAAOhB,IAAQgB,UEM9BE,EAjBM,WAAO,IAAD,EACW7C,mBAAS,CAAC,KADrB,mBAClBF,EADkB,KACNC,EADM,KAGzB,OACE,6BACE,wBAAIU,UAAU,2BAAd,WACA,kBAAC,EAAD,CAAaV,cAAeA,EAAeD,WAAYA,IAEvD,4BACGA,EAAW2B,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS4B,IAAK5B,EAAUA,SAAUA,U,MCT5C8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.23086d3d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AppCategory = ({ categories, setCategories }) => {\r\n\tconst [imputValue, setImputValue] = useState('');\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (!imputValue.trim()) {\r\n\t\t\tconsole.log('Ingrese un valor');\r\n\t\t} else {\r\n\t\t\tsetCategories([imputValue, ...categories]);\r\n\t\t\tsetImputValue('');\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<form onSubmit={handleSubmit} >\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"bg-white focus:outline-none focus:shadow-outline border border-gray-300 rounded-lg py-2 px-4 block w-full appearance-none leading-normal\"\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tplaceholder=\"Busque un Gifs\"\r\n\t\t\t\tvalue={imputValue}\r\n\t\t\t\tonChange={(e) => setImputValue(e.target.value)}\r\n\t\t\t/>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nAppCategory.propTypes = {\r\n\tcategories: PropTypes.array.isRequired,\r\n\tsetCategories: PropTypes.func.isRequired,\r\n};\r\nexport default AppCategory;\r\n","const API_KEY = \"eo66UhWn1AMWl7V8m2IPaX96Yoza4jhc\";\r\nconst NUMERO = 10;\r\n\r\nexport const getGifs = async (category) => {\r\n\tconst URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${NUMERO}&api_key=${API_KEY}`;\r\n\r\n\tconst resp = await fetch(URL);\r\n\tconst { data } = await resp.json();\r\n\r\n\tconst gifs = data.map((img) => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url,\r\n\t\t};\r\n\t});\r\n\treturn gifs;\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n\r\n    <div className=\"max-w-sm rounded overflow-hidden shadow-lg mb-3 mx-3\">\r\n      <img className=\"object-cover h-48 w-full\" src={url} alt={title}></img>\r\n      <div className=\"px-6 py-4\">\r\n        <div className=\"font-bold text-xl mb-0\">{title}</div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nGifGridItem.propTypes = {\r\n  url: PropTypes.string.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport GifGridItem from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\tconst { data: images, loading } = useFetchGifs(category);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"text-xl py-3 animate__animated animate__zoomIn\">{category}</h3>\r\n\t\t\t{loading && <p>Loading....</p>}\r\n\t\t\t<div className=\"flex flex-wrap\">\r\n\t\t\t\t{images.map((imagen) => {\r\n\t\t\t\t\treturn <GifGridItem key={imagen.id} {...imagen} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n};\r\n\r\nGifGrid.propTypes = {\r\n\tcategory: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t});\r\n\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs(category).then((imgs) => {\r\n\t\t\tsetState({\r\n\t\t\t\tdata: imgs,\r\n\t\t\t\tloading: false,\r\n\t\t\t});\r\n\t\t});\r\n\t}, [category]);\r\n\r\n\treturn state; //{data: [],loading: true}\r\n};\r\n","import React, { useState } from \"react\";\nimport AppCategory from \"./Components/AppCategory\";\nimport GifGrid from \"./Components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"\"]);\n\n  return (\n    <div>\n      <h2 className=\"text-3xl pb-4 font-bold\" >GifsApp</h2>\n      <AppCategory setCategories={setCategories} categories={categories} />\n\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp.jsx\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}